name: Build
on: [push, pull_request]

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            coverage: true
          - os: windows-latest
            rid: win-x86
          - os: macos-latest
            rid: osx-x64
          - os: ubuntu-latest
            rid: linux-x64
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Build
        run: |
          cd VisualPinball.Engine.Test
          dotnet build VisualPinball.Engine.Test.csproj -c Release -r ${{ matrix.rid }}
      - run: |
          mkdir tmp
          cp -r VisualPinball.Unity/Plugins/${{ matrix.rid }} tmp
      - name: Test 
        run: |
          if [[ "${{ matrix.coverage }}" == "true" ]]; then
             dotnet test -c Release --runtime ${{ matrix.rid }} -p:CollectCoverage=true -p:CoverletOutputFormat=lcov -p:CoverletOutput=../lcov -p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" -p:Exclude=\"[*]VisualPinball.Engine.Math.Triangulator.*,[VisualPinball.Resources]*,[*]VisualPinball.Engine.VPT.Plunger.*\"
          else 
             dotnet test -c Release --runtime ${{ matrix.rid }} 
          fi

          # local report:
          #  dotnet test -c Release --runtime ${{ matrix.rid }} /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover\" /p:CoverletOutput=../lcov /p:ExcludeByAttribute="ExcludeFromCodeCoverageAttribute" /p:Exclude=\"[*]VisualPinball.Engine.Math.Triangulator.*,[VisualPinball.Resources]*,[*]VisualPinball.Engine.VPT.Plunger.*\"
          #  dotnet tool install -g dotnet-reportgenerator-globaltool
          #  reportgenerator -reports:lcov.opencover.xml -targetdir:coveragereport -reporttypes:Html

      - name: Publish Coverage
        if: ${{ matrix.coverage }}
        run: | 
          bash <(curl -s https://codecov.io/bash)
      - uses: actions/upload-artifact@v2
        with:
          name: Plugins
          path: tmp

  test:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
           path: VisualPinball.Engine
      - uses: actions/download-artifact@v2
        with:
          name: Plugins
          path: VisualPinball.Engine/VisualPinball.Unity/Plugins
      - run: |
          ls -laR VisualPinball.Engine/VisualPinball.Unity/Plugins
      - run: |
          mv VisualPinball.Engine/VisualPinball.Unity/VisualPinball.Unity.Test/TestProject~ TestProject
          cd TestProject/Packages
          jq '.dependencies."org.visualpinball.engine.unity" = "file:../../VisualPinball.Engine"' manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json
      - uses: actions/cache@v2
        with:
         path: TestProject/Library
         key: Library-test-project
         restore-keys: |
           Library-test-project
           Library
      - uses: game-ci/unity-test-runner@v2.0-alpha-5
        id: test
        with:
          unityVersion: '2020.3.13f1'
          projectPath: TestProject
          testMode: all
          customParameters: "-nographics"
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results
          path: ${{ steps.test.outputs.artifactsPath }}

  dispatch:
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.repository == 'freezy/VisualPinball.Engine' && github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_PAT }}
          event-type: build-complete
          client-payload: '{"artifacts_run_id": "${{ github.run_id }}"}'
